动态代理:基于反射
1:什么是动态代理
	使用jdk的反射机制,创建对象的能力,创建的是代理类对象,而不用自己创建类文件(.Java文件)
	动态:是指在程序执行时,调用jdk提供的方法才能创建代理类对象
	
	必须有接口,目标类必须实现接口
2:动态代理能做什么
	可以在不改变原来功能的前提下,在代码中增强自己的功能代码
	例:在项目中有一个功能a是其他人写好的,你可以使用但是不能完全满足你的功能需要,需要在功能a增加自己的代码,
		可以用代理的方式在调用功能a的同时增加自己的代码

使用场景:a类调用c类中的方法完成功能,但是c不允许a类访问--->在a类和c类中创建一个代理b,c让b访问
例:发短信,获取短信验证码 :某项目发短信----->提供短信发送功能的公司 ----->移动

代理模式的作用:
1.功能增强:在原有的功能上,增加了额外的功能
2.控制访问:代理类不让你直接访问目标

实现方式
1:静态代理:  a>代理类是自己手工实现的,自己创建一个Java类,表示代理类
			 b>同时你所要代理的目标是确定的
优点:1.简单实现2.容易理解
缺点:1.当目标类增加了,代理类可能也需要成倍的增加   2.当接口中的功能改变了(增,改等)会影响众多的实现类

2:动态代理:在静态代理中目标类很多的时候,可以使用动态代理避免静态代理的缺点
在动态代理中目标类即使很多,代理类的数量也可以很少,当修改了接口中的方法时,不会影响代理类

在程序执行的过程中,使用jdk的反射机制,创建代理对象,并动态的指出要代理的目标类,动态代理省略了创建对象的过程
换句话说,动态代理是一种创建Java对象的能力,让你不用创建TaoBao类就可以创建代理类对象
      在java中,要想创建对象
	  1:创建类文件,java文件编译为class
	  2:使用构造方法,创建类对象,


动态代理的实现:
		1.jdk动态代理:使用java反射包中的类和接口实现动态代理功能
						反射包:java.lang.reflect,里面有三个类:InvocationHandler,Method,Proxy
		2.cglib动态代理(了解):cglib是一个第三方的工具库用来创建代理对象,其原理是继承,通过继承目标类创建它的子类
							  在子类中重写父类的同名方法,实现功能的修改,要求目标类,方法不能是final,常用于框架中
		
jdk动态代理:
	1.反射:Method类表示方法,类中的方法,通过Method可以执行类中的某个方法
	
	
	
	